#!/usr/bin/env python3
#
# Copyright 2013 Simone Campagna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

__author__ = 'Simone Campagna'

import sys
import argparse

from unix_sessions.manager import Manager
from unix_sessions.serializer import Serializer

def main():
    manager = Manager()
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""\
Change the current session""",
        epilog = "")

    subparsers = parser.add_subparsers(
        help="action")

    parser_create = subparsers.add_parser("create", aliases=['cr'],
        help="create new session")
    parser_create.set_defaults(function=manager.create_session)

    parser_delete = subparsers.add_parser("delete", aliases=['cr'],
        help="delete session")
    parser_delete.set_defaults(function=manager.delete_sessions)

    parser_load = subparsers.add_parser("load", aliases=['lo'],
        help="load existing session")
    parser_load.set_defaults(function=manager.load_session)

    for subparser in (parser_create, parser_load):
        subparser.add_argument("session_name",
            type=str,
            nargs='?',
            default=None,
            help="session name")

    for subparser in (parser_delete, ):
        subparser.add_argument("session_names",
            type=str,
            nargs='+',
            default=None,
            help="session names")

    parser_add = subparsers.add_parser("add",
        help="add a package to current session")
    parser_add.add_argument("package_labels",
        type=str,
        nargs='+',
        default=None,
        help="package name")
    parser_add.set_defaults(function=manager.add)

    parser_remove = subparsers.add_parser("remove", aliases=['rem', 'del'],
        help="remove a package from current session")
    parser_remove.add_argument("package_labels",
        type=str,
        nargs='+',
        default=None,
        help="package name")
    parser_remove.set_defaults(function=manager.remove)

    parser_list = subparsers.add_parser("list", aliases=['li'],
        help="list available sessions")
    parser_list.add_argument("--persistent", "-p",
        dest="persistent",
        action="store_true",
        default=None,
        help="show persistent sessions")
    parser_list.add_argument("--no-temporary", "-t",
        dest="temporary",
        action="store_true",
        default=None,
        help="show temporary sessions")
    parser_list.set_defaults(function=manager.list)

    parser_info = subparsers.add_parser("info", aliases=[],
        help="info about current session")
    parser_info.set_defaults(function=manager.info)

    parser_show_available_packages = subparsers.add_parser("available", aliases=["avail", "av"],
        help="show available packages")
    parser_show_available_packages.set_defaults(function=manager.show_available_packages)

    parser_show_package = subparsers.add_parser("show", aliases=[],
        help="show package content")
    parser_show_package.add_argument("package_label",
        help="package label")
    parser_show_package.set_defaults(function=manager.show_package)

    parser_init = subparsers.add_parser("init", aliases=[],
        help="init modules to current session")
    parser_init.set_defaults(function=manager.init)

    parser_apply = subparsers.add_parser("apply", aliases=[],
        help="apply modules to current session")
    parser_apply.set_defaults(function=manager.apply)

    parser_revert = subparsers.add_parser("revert", aliases=[],
        help="revert modules to current session")
    parser_revert.set_defaults(function=manager.revert)

    serializer_names = list(Serializer.__registry__.keys())
    #default_serializer_output_filename = manager.get_default_serializer_output_filename()
    #if serializer_names:
    #    default_serializer_name = serializer_names[0]
    #else:
    #    default_serializer_name = None

    for subparser in parser_init, parser_apply, parser_revert:
        subparser.add_argument('--shell', '-s',
            dest="serializer",
            type=Serializer.createbyname,
            default=manager.serializer,
            help="shell type")
        subparser.add_argument('--output', '-o',
            dest="serialization_filename",
            type=str,
            default=manager.serialization_filename,
            help="shell type")

    args = parser.parse_args()

    if 'persistent' in args and 'temporary' in args:
        if args.persistent is None:
            if args.temporary is None:
                args.persistent = True
                args.temporary = True
            else:
                args.persistent = False
        if args.temporary is None:
            args.temporary = False
    p_args = args._get_args()
    n_args = dict(args._get_kwargs())
    del n_args['function']

    #print(manager.session)
    args.function(*p_args, **n_args)
    #print(manager.session)

    manager.serialize()

if __name__ == "__main__":
    main()
