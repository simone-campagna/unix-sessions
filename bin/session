#!/usr/bin/env python3
#
# Copyright 2013 Simone Campagna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

__author__ = 'Simone Campagna'

import sys
import argparse

from unix_sessions.manager import Manager
from unix_sessions.serializer import Serializer
from unix_sessions.utils.debug import set_verbose, set_debug, LOGGER
from unix_sessions.utils.trace import set_trace, trace

def main():
    manager = Manager()
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""\
Change the current session""",
        epilog = "")

    parser.add_argument("--verbose", "-v",
        action="store_true",
        default=False,
        help="set verbose on")

    parser.add_argument("--debug", "-d",
        action="store_true",
        default=False,
        help="set debug on")

    parser.add_argument("--trace", "-t",
        action="store_true",
        default=False,
        help="show traceback on errors")

    subparsers = parser.add_subparsers(
        help="action")

    ### Session subparser
    parser_session = subparsers.add_parser("session", aliases=["s"],
        help="session management")

    session_subparsers = parser_session.add_subparsers(
        help="session action")

    parser_session_create = session_subparsers.add_parser("create", aliases=["cr"],
        help="create new session")
    
    parser_session_load = session_subparsers.add_parser("load", aliases=["lo"],
        help="load existing session")
    
    parser_session_delete = session_subparsers.add_parser("delete", aliases=["del"],
        help="delete existing sessions")
    
    parser_session_new = session_subparsers.add_parser("new",
        help="create and load new session")
    
    parser_session_available = session_subparsers.add_parser("available", aliases=['avail'],
        help="list available sessions")
    parser_session_available.add_argument("--persistent", "-p",
        dest="persistent",
        action="store_true",
        default=None,
        help="show persistent sessions")
    parser_session_available.add_argument("--no-temporary", "-t",
        dest="temporary",
        action="store_true",
        default=None,
        help="show temporary sessions")
    parser_session_available.set_defaults(function=manager.show_available_sessions)

    parser_session_info = session_subparsers.add_parser("info", aliases=[],
        help="info about current session")
    parser_session_info.set_defaults(function=manager.info_session)

    parser_session_show_available_packages = session_subparsers.add_parser("avail", aliases=["av"],
        help="show available packages")
    parser_session_show_available_packages.set_defaults(function=manager.show_available_packages)

    for subparser in (parser_session_create, parser_session_load, parser_session_new):
        subparser.add_argument("session_name",
            type=str,
            nargs='?',
            default=None,
            help="session name")

    for subparser in (parser_session_delete, ):
        subparser.add_argument("session_names",
            type=str,
            nargs='+',
            default=None,
            help="session names")

    ### Package subparser
    parser_package = subparsers.add_parser("package", aliases=["p"],
        help="package management")

    package_subparsers = parser_package.add_subparsers(
        help="package action")

    parser_package_show_available_packages = package_subparsers.add_parser("avail", aliases=["av"],
        help="show available packages")
    parser_package_show_available_packages.set_defaults(function=manager.show_available_packages)

    parser_package_show_package = package_subparsers.add_parser("show", aliases=[],
        help="show package content")
    parser_package_show_package.add_argument("package_label",
        help="package label")
    parser_package_show_package.set_defaults(function=manager.show_package)

    parser_package_add = package_subparsers.add_parser("add",
        help="add a package to current session")
    parser_package_add.set_defaults(function=manager.add_packages)

    parser_package_remove = package_subparsers.add_parser("remove", aliases=['rem'],
        help="remove a package from current session")
    parser_package_remove.set_defaults(function=manager.remove_packages)

    for subparser in parser_package_add, parser_package_remove:
        subparser.add_argument("package_labels",
        type=str,
        nargs='+',
        default=None,
        help="package name")

    parser_package_add_directories = package_subparsers.add_parser("add_dir",
        help="add a package directory to current session")
    parser_package_add_directories.set_defaults(function=manager.add_package_directories)

    parser_package_remove_directories = package_subparsers.add_parser("remove_dir", aliases=['rem_dir'],
        help="remove a package directory from current session")
    parser_package_remove_directories.set_defaults(function=manager.remove_package_directories)

    for subparser in parser_package_add_directories, parser_package_remove_directories:
        subparser.add_argument("package_directories",
        type=str,
        nargs='+',
        default=None,
        help="package directory")

    ### other subparsers
    parser_init = subparsers.add_parser("init", aliases=[],
        help="init modules to current session")
    parser_init.set_defaults(function=manager.init)

    args = parser.parse_args()

    set_trace(args.trace)
    set_verbose(args.verbose)
    set_debug(args.debug)

    if 'persistent' in args and 'temporary' in args:
        if args.persistent is None:
            if args.temporary is None:
                args.persistent = True
                args.temporary = True
            else:
                args.persistent = False
        if args.temporary is None:
            args.temporary = False
    p_args = args._get_args()
    n_args = dict(args._get_kwargs())
    for key in 'function', 'verbose', 'debug', 'trace':
        if key in n_args:
            del n_args[key]

    try:
        #print(manager.session)
        args.function(*p_args, **n_args)
        #print(manager.session)
    
        manager.serialize()
    except Exception as e:
        trace()
        LOGGER.error("{0}: {1}".format(e.__class__.__name__, e))

if __name__ == "__main__":
    main()
