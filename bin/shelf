#!/usr/bin/env python3
#
# Copyright 2013 Simone Campagna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

__author__ = 'Simone Campagna'

import os
import sys
import argparse

from unix_sessions.manager import Manager
from unix_sessions.errors import SessionConfigError
from unix_sessions.utils.debug import set_verbose, set_debug, LOGGER
from unix_sessions.utils.trace import set_trace, trace
from unix_sessions.utils.install_data import set_home_dir, set_admin_user
from unix_sessions.application.parser import add_help_parser


def main():
    set_home_dir("@UXS_HOME_DIR@")
    set_admin_user("@UXS_ADMIN_USER@")
    try:
        manager = Manager()
    except Exception as e:
        trace(True)
        LOGGER.error("{0}: {1}".format(e.__class__.__name__, e))
        if not isinstance(e, SessionConfigError):
            LOGGER.error("Session is corrupted. Unset environment variable UXS_SESSION and try again with a new session.")
        sys.exit(1)

    class Formatter(argparse.RawTextHelpFormatter):
        def __init__(self, prog, indent_increment=2, max_help_position=27, width=None):
            super().__init__(prog, indent_increment, max_help_position, width)

    admin_mode = manager.is_admin()

    #Formatter = argparse.HelpFormatter

    ### Common parser
    common_parser = argparse.ArgumentParser(
        add_help=False,
        formatter_class=Formatter,
    )
    common_parser.add_argument("--verbose", "-v",
        action="store_true",
        default=manager.get_config_key('verbose'),
        help="set verbose on")

    common_parser.add_argument("--debug", "-d",
        action="store_true",
        default=manager.get_config_key('debug'),
        help="set debug on")

    common_parser.add_argument("--trace", "-t",
        action="store_true",
        default=manager.get_config_key('trace'),
        help="show traceback on errors")

    common_parser.add_argument("--full-label", "-f",
        action="store_true",
        default=manager.get_config_key('full_label'),
        help="show full package labels")

    ### Top-level parser
    top_level_parser = argparse.ArgumentParser(
        parents = [common_parser],
        formatter_class=Formatter,
        description="""\
Change the current session""",
        epilog = "")

    ### Subparsers
    top_level_subparsers = top_level_parser.add_subparsers(
        description="Commands to change the current session.")

    ### Version_defaults subparser
    parser_version_defaults =  top_level_subparsers.add_parser("versions",
        aliases=["v"],
        parents=[common_parser],
        formatter_class=Formatter,
        help="packages' default versions")

    version_defaults_subparsers = parser_version_defaults.add_subparsers(
        description="Version defaults subcommands.")

    ### Config subparser
    parser_config =  top_level_subparsers.add_parser("config",
        aliases=["c"],
        parents=[common_parser],
        formatter_class=Formatter,
        help="default values for some command line options")

    config_subparsers = parser_config.add_subparsers(
        description="Config subcommand.")

    ### Site subparser
    parser_host = top_level_subparsers.add_parser("host",
        aliases=['h'],
        parents=[common_parser],
        formatter_class=Formatter,
        help="host configuration; only available for administrators")

    host_subparsers = parser_host.add_subparsers(
        description="Host subcommand.")

    parser_host_version_defaults = host_subparsers.add_parser("versions",
        aliases=["v"],
        formatter_class=Formatter,
        help="host default packages' versions")

    host_version_defaults_subparsers = parser_host_version_defaults.add_subparsers(
        description="Host version defaults management.")

    parser_host_config = host_subparsers.add_parser("config",
        aliases=["c"],
        formatter_class=Formatter,
        help="host default values")

    host_config_subparsers = parser_host_config.add_subparsers(
        description="Host default values management.")

    ### User subparser
    parser_user = top_level_subparsers.add_parser("user",
        aliases=['u'],
        parents=[common_parser],
        formatter_class=Formatter,
        help="user configuration")

    user_subparsers = parser_user.add_subparsers(
        description="User subcommand")
    
    parser_user_version_defaults = user_subparsers.add_parser("versions",
        aliases=["v"],
        formatter_class=Formatter,
        help="user default packages' versions")

    user_version_defaults_subparsers = parser_user_version_defaults.add_subparsers(
        description="User version defaults management.")

    parser_user_config = user_subparsers.add_parser("config",
        aliases=["c"],
        formatter_class=Formatter,
        help="user default values")

    user_config_subparsers = parser_user_config.add_subparsers(
        description="User default values management.")

    ### Session subparser
    parser_session = top_level_subparsers.add_parser("session",
        aliases=["s"],
        parents=[common_parser],
        formatter_class=Formatter,
        help="session management")

    session_subparsers = parser_session.add_subparsers(
        description="Session subcommand.")

    parser_session_create = session_subparsers.add_parser("create",
        aliases=["cr"],
        parents=[common_parser],
        formatter_class=Formatter,
        help="create a new session")
    parser_session_create.set_defaults(function=manager.create_session)
    
    parser_session_load = session_subparsers.add_parser("load",
        aliases=["lo"],
        parents=[common_parser],
        formatter_class=Formatter,
        help="load an existing session")
    parser_session_load.set_defaults(function=manager.load_session)
    
    parser_session_delete = session_subparsers.add_parser("delete",
        aliases=["del"],
        parents=[common_parser],
        formatter_class=Formatter,
        help="delete existing sessions")
    parser_session_delete.set_defaults(function=manager.delete_sessions)
    
    parser_session_new = session_subparsers.add_parser("new",
        parents=[common_parser],
        formatter_class=Formatter,
        help="create and load a new session")
    parser_session_new.set_defaults(function=manager.new_session)
    
    parser_session_available = session_subparsers.add_parser("available",
        aliases=['avail', 'av'],
        parents=[common_parser],
        formatter_class=Formatter,
        help="list all available sessions")
    parser_session_available.add_argument("--no-persistent", "-P",
        dest="persistent",
        action="store_true",
        default=None,
        help="list persistent sessions")
    parser_session_available.add_argument("--no-temporary", "-T",
        dest="temporary",
        action="store_true",
        default=None,
        help="list temporary sessions")
    parser_session_available.set_defaults(function=manager.show_available_sessions)

    parser_session_info = session_subparsers.add_parser("info",
        aliases=[],
        parents=[common_parser],
        formatter_class=Formatter,
        help="show information about the current session")
    parser_session_info.set_defaults(function=manager.info_session)

    parser_session_copy = session_subparsers.add_parser("copy",
        parents=[common_parser],
        formatter_class=Formatter,
        help="copy sessions")
    parser_session_copy.set_defaults(function=manager.copy_sessions)

    for subparser in (parser_session_create, parser_session_load, parser_session_new):
        subparser.add_argument("session_name",
            type=str,
            nargs='?',
            default=None,
            help="session name")

    for subparser in (parser_session_delete, parser_session_copy):
        subparser.add_argument("session_names",
            type=str,
            nargs='+',
            default=None,
            help="session names")

    parser_session_version_defaults = session_subparsers.add_parser("versions",
        aliases=["v"],
        formatter_class=Formatter,
        help="session default packages' versions")

    session_version_defaults_subparsers = parser_session_version_defaults.add_subparsers(
        description="Session version defaults management.")

    parser_session_config = session_subparsers.add_parser("config",
        aliases=["c"],
        formatter_class=Formatter,
        help="session default values")

    session_config_subparsers = parser_session_config.add_subparsers(
        description="Session default values management.")

    parser_version_defaults_show = {}
    for subparsers in version_defaults_subparsers, host_version_defaults_subparsers, user_version_defaults_subparsers, session_version_defaults_subparsers:
        parser_version_defaults_show[subparsers] = subparsers.add_parser("show",
            parents=[common_parser],
            formatter_class=Formatter,
            help="show current packages version defaults")
        parser_version_defaults_show[subparsers].add_argument("keys",
            nargs='*',
            help="show keys")
    
    parser_version_defaults_show[version_defaults_subparsers].set_defaults(function=manager.show_current_package_option, option='version_defaults')
    parser_version_defaults_show[host_version_defaults_subparsers].set_defaults(function=manager.show_host_package_option, option='version_defaults')
    parser_version_defaults_show[user_version_defaults_subparsers].set_defaults(function=manager.show_user_package_option, option='version_defaults')
    parser_version_defaults_show[session_version_defaults_subparsers].set_defaults(function=manager.show_session_package_option, option='version_defaults')


    parser_version_defaults_set = {}
    parser_version_defaults_reset = {}
    mutable_version_defaults_subparsers = []
    if admin_mode:
        mutable_version_defaults_subparsers.append(host_version_defaults_subparsers)
    mutable_version_defaults_subparsers.extend((user_version_defaults_subparsers, session_version_defaults_subparsers))

    for subparsers in mutable_version_defaults_subparsers:
        parser_version_defaults_set[subparsers] = subparsers.add_parser("set",
            parents=[common_parser],
            formatter_class=Formatter,
            help="set default packages' versions")
        parser_version_defaults_set[subparsers].add_argument("key_values",
            nargs='*',
            help="set key=value pairs")
        parser_version_defaults_reset[subparsers] = subparsers.add_parser("reset",
            parents=[common_parser],
            help="reset default packages' versions")
        parser_version_defaults_reset[subparsers].add_argument("keys",
            nargs='*',
            help="reset keys")

    if admin_mode:
        parser_version_defaults_set[host_version_defaults_subparsers].set_defaults(function=manager.set_host_package_option, option='version_defaults')
        parser_version_defaults_reset[host_version_defaults_subparsers].set_defaults(function=manager.reset_host_package_option, option='version_defaults')
 
    parser_version_defaults_set[user_version_defaults_subparsers].set_defaults(function=manager.set_user_package_option, option='version_defaults')
    parser_version_defaults_reset[user_version_defaults_subparsers].set_defaults(function=manager.reset_user_package_option, option='version_defaults')

    parser_version_defaults_set[session_version_defaults_subparsers].set_defaults(function=manager.set_session_package_option, option='version_defaults')
    parser_version_defaults_reset[session_version_defaults_subparsers].set_defaults(function=manager.reset_session_package_option, option='version_defaults')

    parser_config_show = {}
    for subparsers in config_subparsers, host_config_subparsers, user_config_subparsers, session_config_subparsers:
        parser_config_show[subparsers] = subparsers.add_parser("show",
            parents=[common_parser],
            formatter_class=Formatter,
            help="show current default values")
        parser_config_show[subparsers].add_argument("keys",
            nargs='*',
            help="show keys")
    
    parser_config_show[config_subparsers].set_defaults(function=manager.show_current_config)
    parser_config_show[host_config_subparsers].set_defaults(function=manager.show_host_config)
    parser_config_show[user_config_subparsers].set_defaults(function=manager.show_user_config)
    parser_config_show[session_config_subparsers].set_defaults(function=manager.show_session_config)

    parser_config_set = {}
    parser_config_reset = {}
    mutable_config_subparsers = []
    if admin_mode:
        mutable_config_subparsers.append(host_config_subparsers)
    mutable_config_subparsers.extend((user_config_subparsers, session_config_subparsers))

    for subparsers in mutable_config_subparsers:
        parser_config_set[subparsers] = subparsers.add_parser("set",
            parents=[common_parser],
            formatter_class=Formatter,
            help="set default values")
        parser_config_set[subparsers].add_argument("key_values",
            nargs='*',
            help="set key=value pairs")
        parser_config_reset[subparsers] = subparsers.add_parser("reset",
            parents=[common_parser],
            formatter_class=Formatter,
            help="reset default values")
        parser_config_reset[subparsers].add_argument("keys",
            nargs='*',
            help="reset keys")

    if admin_mode:
        parser_config_set[host_config_subparsers].set_defaults(function=manager.set_host_config)
        parser_config_reset[host_config_subparsers].set_defaults(function=manager.reset_host_config)
 
    parser_config_set[user_config_subparsers].set_defaults(function=manager.set_user_config)
    parser_config_reset[user_config_subparsers].set_defaults(function=manager.reset_user_config)

    parser_config_set[session_config_subparsers].set_defaults(function=manager.set_session_config)
    parser_config_reset[session_config_subparsers].set_defaults(function=manager.reset_session_config)

    ### Package subparser
    parser_package = top_level_subparsers.add_parser("package",
        aliases=["p"],
        parents=[common_parser],
        formatter_class=Formatter,
        help="package management")

    package_subparsers = parser_package.add_subparsers(
        description="Package subcommand.")

    ### Package_dir subparsers
    parser_package_dir = top_level_subparsers.add_parser("package_dir",
        aliases=["dir"],
        parents=[common_parser],
        formatter_class=Formatter,
        help="package directories management")

    package_dir_subparsers = parser_package_dir.add_subparsers(
        description="""Package directory subcommand.""")

    parser_package_dir_list = package_dir_subparsers.add_parser("list",
        aliases=["li"],
        parents=[common_parser],
        formatter_class=Formatter,
        help="list current package directories")
    parser_package_dir_list.set_defaults(function=manager.show_package_directories)

    parser_package_dir_add = package_dir_subparsers.add_parser("add",
        parents=[common_parser],
        formatter_class=Formatter,
        help="add a package directory to current session")
    parser_package_dir_add.set_defaults(function=manager.add_package_directories)

    parser_package_dir_remove = package_dir_subparsers.add_parser("remove",
        aliases=['rem'],
        parents=[common_parser],
        formatter_class=Formatter,
        help="remove a package directory from current session")
    parser_package_dir_remove.set_defaults(function=manager.remove_package_directories)

    for subparser in parser_package_dir_add, parser_package_dir_remove:
        subparser.add_argument("package_directories",
            type=str,
            nargs='+',
            default=None,
            help="package directory")

    for subparsers in top_level_subparsers, package_subparsers:
        parser_package_show_available_packages = subparsers.add_parser("available",
            aliases=["avail", "av"],
            parents=[common_parser],
            formatter_class=Formatter,
            help="list available packages")
        parser_package_show_available_packages.set_defaults(function=manager.show_available_packages)

        parser_package_show_loaded_packages = subparsers.add_parser("list",
            aliases=["li"],
            parents=[common_parser],
            formatter_class=Formatter,
            help="list loaded packages")
        parser_package_show_loaded_packages.set_defaults(function=manager.show_loaded_packages)

        parser_package_show_package = subparsers.add_parser("show",
            aliases=[],
            parents=[common_parser],
            formatter_class=Formatter,
            help="show package content")
        parser_package_show_package.add_argument("package_label",
            help="package label")
        parser_package_show_package.set_defaults(function=manager.show_package)
    
        parser_package_add = subparsers.add_parser("add",
            parents=[common_parser],
            formatter_class=Formatter,
            help="add packages to current session",
            epilog="""\
[Resolution aggressivity level]:
  > 0: missing requirements are searched in available packages
  > 1: missing requirements are searched in defined packages
""")
        parser_package_add.set_defaults(function=manager.add_packages)
    
        parser_package_remove = subparsers.add_parser("remove",
            aliases=['rem'],
            parents=[common_parser],
            formatter_class=Formatter,
            help="remove packages from current session",
            epilog="""\
[Resolution aggressivity level]:
  > 0: packages with unsatisfied requirements after removal will be
       automatically removed
""")
        parser_package_remove.set_defaults(function=manager.remove_packages)

        parser_package_clear = subparsers.add_parser("clear",
            parents=[common_parser],
            formatter_class=Formatter,
            help="remove all loaded packages from current session")
        parser_package_clear.set_defaults(function=manager.clear_packages)

        for key, subparser in ('add', parser_package_add), ('remove', parser_package_remove):
            subparser.add_argument("package_labels",
                type=str,
                nargs='+',
                default=None,
                help="package name")
            subparser.add_argument("--resolve", "-r",
                dest="resolution_level",
                action="count",
                default=manager.get_config_key('resolution_level'),
                help="automatically resolve missing requirements (repeat to increase aggressivity level)")
            subparser.add_argument("--subpackages", "-s",
                dest="subpackages",
                action="store_true",
                default=manager.get_config_key('subpackages'),
                help="automatically {0} all suite's packages".format(key))
         
        for subparser_name, subparser in ('add', parser_package_add), ('remove', parser_package_remove), ('clear', parser_package_clear):
            subparser.add_argument("--dry-run", "-D",
                dest="dry_run",
                action="store_true",
                default=False,
                help="show only changes")

            subparser.add_argument("--sticky", "-S",
                dest="sticky",
                action="store_true",
                default=False,
                help="{0} sticky packages".format(subparser_name))

    ### other subparsers
#    parser_init = top_level_subparsers.add_parser("init",
#        aliases=[],
#        parents=[common_parser],
#        help="init modules to current session")
#    parser_init.set_defaults(function=manager.init)

    #add_help_parser(top_level_parser)

    args = top_level_parser.parse_args()

    set_trace(args.trace)
    set_verbose(args.verbose)
    set_debug(args.debug)
    manager.set_show_full_label(args.full_label)

    if 'persistent' in args and 'temporary' in args:
        if args.persistent is None:
            if args.temporary is None:
                args.persistent = True
                args.temporary = True
            else:
                args.persistent = False
        if args.temporary is None:
            args.temporary = False
    p_args = args._get_args()
    n_args = dict(args._get_kwargs())
    for key in 'function', 'verbose', 'debug', 'trace', 'full_label':
        if key in n_args:
            del n_args[key]

    manager.initialize()
    try:
        args.function(*p_args, **n_args)
    except Exception as e:
        trace()
        LOGGER.error("{0}: {1}".format(e.__class__.__name__, e))
    else:
        manager.finalize()

if __name__ == "__main__":
    main()
